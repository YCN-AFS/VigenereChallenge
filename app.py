import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from vigenere_cipher import encrypt_vigenere, decrypt_vigenere, caesar_shift
from frequency_analysis import (
    calculate_frequencies, 
    plot_frequencies, 
    analyze_vigenere_key_length,
    break_vigenere_cipher
)
from googletrans import Translator
from PIL import Image, ImageDraw, ImageFont
import io
import base64
import random
import os

# Setup translations
translator = Translator()

def translate_text(text, dest='vi'):
    """Translate text to the target language"""
    try:
        translation = translator.translate(text, dest=dest)
        return translation.text
    except Exception as e:
        # Fall back to original text if translation fails
        st.error(f"Translation error: {e}")
        return text

# App configuration
st.set_page_config(
    page_title="Th·ª≠ Th√°ch M·∫≠t M√£ Vigen√®re",  # Vigen√®re Cipher Challenge
    page_icon="üîê",
    layout="wide"
)

# Vietnamese Translation dictionaries
translations = {
    "title": "üîê Th·ª≠ Th√°ch M·∫≠t M√£ Vigen√®re",
    "introduction": """
    ## Gi·ªõi thi·ªáu
    
    M·∫≠t m√£ Vigen√®re l√† m·ªôt ph∆∞∆°ng ph√°p m√£ h√≥a vƒÉn b·∫£n b·∫£ng ch·ªØ c√°i b·∫±ng c√°ch s·ª≠ d·ª•ng m·ªôt d·∫°ng thay th·∫ø ƒëa b·∫£ng ch·ªØ c√°i ƒë∆°n gi·∫£n.
    N√≥ ƒë∆∞·ª£c coi l√† kh√¥ng th·ªÉ ph√° v·ª° trong h∆°n 300 nƒÉm!
    
    Kh√°c v·ªõi m·∫≠t m√£ Caesar ch·ªâ s·ª≠ d·ª•ng m·ªôt gi√° tr·ªã d·ªãch chuy·ªÉn duy nh·∫•t, m·∫≠t m√£ Vigen√®re s·ª≠ d·ª•ng m·ªôt **t·ª´ kh√≥a** ƒë·ªÉ x√°c ƒë·ªãnh
    c√°c gi√° tr·ªã d·ªãch chuy·ªÉn kh√°c nhau cho c√°c v·ªã tr√≠ kh√°c nhau trong vƒÉn b·∫£n, l√†m cho n√≥ an to√†n h∆°n nhi·ªÅu.
    
    Trong ph√≤ng th√≠ nghi·ªám n√†y, b·∫°n s·∫Ω:
    1. H·ªçc c√°ch m·∫≠t m√£ Vigen√®re ho·∫°t ƒë·ªông
    2. Th·ª±c hi·ªán c√°c thu·∫≠t to√°n m√£ h√≥a v√† gi·∫£i m√£
    3. Th·ª≠ ph√° v·ª° m·∫≠t m√£ b·∫±ng ph√¢n t√≠ch t·∫ßn su·∫•t
    4. So s√°nh b·∫£o m·∫≠t c·ªßa m·∫≠t m√£ Vigen√®re v√† Caesar
    
    H√£y b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u m·∫≠t m√£ c·ªßa b·∫°n!
    """,
    "level": "C·∫•p ƒë·ªô",
    "mission": "Nhi·ªám v·ª•",
    "complete": "Ho√†n th√†nh",
    "encrypt": "M√£ h√≥a",
    "decrypt": "Gi·∫£i m√£",
    "challenge": "Th·ª≠ th√°ch",
    "next_level": "C·∫•p ƒë·ªô ti·∫øp theo",
    "congrats": "Ch√∫c m·ª´ng!",
    "try_again": "H√£y th·ª≠ l·∫°i",
    "mission_complete": "Nhi·ªám v·ª• ho√†n th√†nh!",
    "correct": "Ch√≠nh x√°c!",
    "incorrect": "Kh√¥ng ch√≠nh x√°c!",
}

def generate_badge(text, color="#4CAF50"):
    """Generate a colorful badge image with text"""
    width, height = 300, 100
    img = Image.new('RGB', (width, height), color=color)
    draw = ImageDraw.Draw(img)
    
    # Try to use a nice font, fallback to default if not available
    try:
        font = ImageFont.truetype("Arial.ttf", 36)
    except IOError:
        font = ImageFont.load_default()
    
    # Center text
    try:
        # For newer Pillow versions
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
    except AttributeError:
        # For older Pillow versions
        text_width, text_height = draw.textsize(text, font=font)
    
    position = ((width-text_width)//2, (height-text_height)//2)
    
    # Draw text with a slight shadow for 3D effect
    draw.text((position[0]+2, position[1]+2), text, font=font, fill="#000000")
    draw.text(position, text, font=font, fill="#FFFFFF")
    
    # Convert to base64 for embedding in page
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

# Initialize session state
if 'game_level' not in st.session_state:
    st.session_state.game_level = 1
if 'challenges_completed' not in st.session_state:
    st.session_state.challenges_completed = 0
if 'show_animation' not in st.session_state:
    st.session_state.show_animation = False
if 'mission_completed' not in st.session_state:
    st.session_state.mission_completed = False
if 'ui_language' not in st.session_state:
    st.session_state.ui_language = 'vi'  # Default to Vietnamese
if 'level1_answer' not in st.session_state:
    st.session_state.level1_answer = ""
if 'level1_submitted' not in st.session_state:
    st.session_state.level1_submitted = False
if 'level1_correct' not in st.session_state:
    st.session_state.level1_correct = False
if 'level2_key' not in st.session_state:
    st.session_state.level2_key = ""
if 'level2_answer' not in st.session_state:
    st.session_state.level2_answer = ""
if 'level2_submitted' not in st.session_state:
    st.session_state.level2_submitted = False
if 'level2_correct' not in st.session_state:
    st.session_state.level2_correct = False
if 'level3_submitted' not in st.session_state:
    st.session_state.level3_submitted = False
if 'level3_correct' not in st.session_state:
    st.session_state.level3_correct = False
if 'final_challenge_completed' not in st.session_state:
    st.session_state.final_challenge_completed = False

def complete_challenge():
    st.session_state.challenges_completed += 1
    st.session_state.show_animation = True
    if st.session_state.challenges_completed >= 3:
        st.session_state.mission_completed = True

def level_up(level=None):
    if level:
        st.session_state.game_level = level
    else:
        st.session_state.game_level += 1
    st.session_state.show_animation = True
    
def update_level1_answer():
    st.session_state.level1_submitted = True
    correct_answer = encrypt_vigenere("VIETNAM", "KEY")
    if st.session_state.level1_answer.upper() == correct_answer:
        st.session_state.level1_correct = True
        complete_challenge()

def update_level2_answer():
    st.session_state.level2_submitted = True
    if st.session_state.level2_key.upper() == "HANOI" and st.session_state.level2_answer.upper() == "CHUCMUNGBANDALAMNENLEVEL":
        st.session_state.level2_correct = True
        complete_challenge()

def update_level3_answer(selected_option):
    st.session_state.level3_submitted = True
    if selected_option == "H∆∞·ªõng d·∫´n v·ªÅ b·∫£o m·∫≠t th√¥ng tin":
        st.session_state.level3_correct = True
        complete_challenge()

def show_encryption_steps(plaintext, key, ciphertext):
    # Create a table showing the encryption process
    data = []
    extended_key = (key * (len(plaintext) // len(key) + 1))[:len(plaintext)]
    
    for i in range(len(plaintext)):
        p_char = plaintext[i]
        k_char = extended_key[i]
        c_char = ciphertext[i]
        
        p_num = ord(p_char) - ord('A')
        k_num = ord(k_char) - ord('A')
        c_num = (p_num + k_num) % 26
        
        data.append([
            i+1,
            p_char,
            p_num,
            k_char,
            k_num,
            f"({p_num} + {k_num}) % 26 = {c_num}",
            c_char
        ])
    
    # Display as a table
    table = "| B∆∞·ªõc | VƒÉn b·∫£n g·ªëc | P (0-25) | Kh√≥a | K (0-25) | T√≠nh to√°n | M·∫≠t m√£ |\n"
    table += "|------|-----------|----------|-----|----------|-------------|------------|\n"
    
    for row in data:
        table += f"| {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]} | {row[5]} | {row[6]} |\n"
    
    st.markdown(table)

def show_decryption_steps(ciphertext, key, plaintext):
    # Create a table showing the decryption process
    data = []
    extended_key = (key * (len(ciphertext) // len(key) + 1))[:len(ciphertext)]
    
    for i in range(len(ciphertext)):
        c_char = ciphertext[i]
        k_char = extended_key[i]
        p_char = plaintext[i]
        
        c_num = ord(c_char) - ord('A')
        k_num = ord(k_char) - ord('A')
        p_num = (c_num - k_num) % 26
        
        data.append([
            i+1,
            c_char,
            c_num,
            k_char,
            k_num,
            f"({c_num} - {k_num}) % 26 = {p_num}",
            p_char
        ])
    
    # Display as a table
    table = "| B∆∞·ªõc | M·∫≠t m√£ | C (0-25) | Kh√≥a | K (0-25) | T√≠nh to√°n | VƒÉn b·∫£n g·ªëc |\n"
    table += "|------|------------|----------|-----|----------|-------------|----------|\n"
    
    for row in data:
        table += f"| {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]} | {row[5]} | {row[6]} |\n"
    
    st.markdown(table)

def level_1_intro():
    st.markdown(translations["introduction"])
    
    st.markdown("## Nguy√™n t·∫Øc c∆° b·∫£n c·ªßa M·∫≠t m√£ Vigen√®re")
    
    st.markdown("""
    M·∫≠t m√£ Vigen√®re s·ª≠ d·ª•ng m·ªôt **t·ª´ kh√≥a** l·∫∑p l·∫°i ƒë·ªÉ t·∫°o ra m·ªôt d√≤ng kh√≥a. M·ªói ch·ªØ c√°i trong t·ª´ kh√≥a
    x√°c ƒë·ªãnh m·ª©c ƒë·ªô d·ªãch chuy·ªÉn c·ªßa m·ªói ch·ªØ c√°i t∆∞∆°ng ·ª©ng trong vƒÉn b·∫£n g·ªëc.
    
    V√≠ d·ª•, n·∫øu t·ª´ kh√≥a c·ªßa b·∫°n l√† "KEY":
    - Ch·ªØ c√°i th·ª© 1 c·ªßa vƒÉn b·∫£n g·ªëc ƒë∆∞·ª£c d·ªãch chuy·ªÉn b·ªüi K (t·ª©c l√† 10 v·ªã tr√≠)
    - Ch·ªØ c√°i th·ª© 2 ƒë∆∞·ª£c d·ªãch chuy·ªÉn b·ªüi E (4 v·ªã tr√≠)
    - Ch·ªØ c√°i th·ª© 3 ƒë∆∞·ª£c d·ªãch chuy·ªÉn b·ªüi Y (24 v·ªã tr√≠)
    - Ch·ªØ c√°i th·ª© 4 ƒë∆∞·ª£c d·ªãch chuy·ªÉn b·ªüi K m·ªôt l·∫ßn n·ªØa, v√¨ t·ª´ kh√≥a l·∫∑p l·∫°i
    
    ƒê√¢y l√† m·ªôt **m·∫≠t m√£ thay th·∫ø ƒëa b·∫£ng ch·ªØ c√°i**, c√≥ nghƒ©a l√† n√≥ s·ª≠ d·ª•ng nhi·ªÅu b·∫£ng ch·ªØ c√°i thay th·∫ø.
    """)
    
    # Visualization of how the cipher works
    st.subheader("B·∫£ng Vigen√®re (Tabula Recta)")
    
    # Creating the Vigen√®re square using a monospaced font in markdown
    square = "```\n   " + " ".join([chr(65+i) for i in range(26)]) + "\n"
    square += "  +" + "-" * 51 + "\n"
    
    for i in range(26):
        row = chr(65+i) + " | "
        for j in range(26):
            # Calculate the letter for this position in the Vigen√®re square
            letter = chr(65 + (i + j) % 26)
            row += letter + " "
        square += row + "\n"
    
    square += "```"
    
    st.markdown(square)
    
    st.markdown("""
    ### C√°ch s·ª≠ d·ª•ng B·∫£ng Vigen√®re:
    
    1. T√¨m h√†ng b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i kh√≥a
    2. T√¨m c·ªôt ƒë∆∞·ª£c ƒë√°nh ƒë·∫ßu b·ªüi ch·ªØ c√°i vƒÉn b·∫£n g·ªëc
    3. Ch·ªØ c√°i t·∫°i giao ƒëi·ªÉm l√† ch·ªØ c√°i m·∫≠t m√£
    
    ### V√≠ d·ª•
    
    - VƒÉn b·∫£n g·ªëc: `HELLO`
    - Kh√≥a: `KEY` (l·∫∑p l·∫°i th√†nh `KEYKE`)
    
    | VƒÉn b·∫£n g·ªëc | Kh√≥a | D·ªãch chuy·ªÉn | M·∫≠t m√£ |
    |-------------|------|-------------|--------|
    | H           | K    | 10          | R      |
    | E           | E    | 4           | I      |
    | L           | Y    | 24          | J      |
    | L           | K    | 10          | V      |
    | O           | E    | 4           | S      |
    
    V·∫≠y "HELLO" ƒë∆∞·ª£c m√£ h√≥a v·ªõi kh√≥a "KEY" tr·ªü th√†nh "RIJVS"
    """)
    
    st.info("üí° C√¥ng th·ª©c to√°n h·ªçc cho m√£ h√≥a Vigen√®re l√†: C = (P + K) % 26, trong ƒë√≥ C l√† m·∫≠t m√£, P l√† vƒÉn b·∫£n g·ªëc, v√† K l√† ch·ªØ c√°i kh√≥a (t·∫•t c·∫£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh s·ªë t·ª´ 0-25)")
    
    # Quiz to move to next level
    st.markdown("### üéÆ Th·ª≠ th√°ch ƒë·ªÉ m·ªü kh√≥a C·∫•p ƒë·ªô 2")
    
    st.text_input("M√£ h√≥a t·ª´ 'VIETNAM' v·ªõi kh√≥a 'KEY'. Nh·∫≠p k·∫øt qu·∫£ c·ªßa b·∫°n:", 
                 key="level1_answer", on_change=update_level1_answer)
    
    if st.session_state.level1_submitted:
        if st.session_state.level1_correct:
            st.success(f"{translations['correct']} '{encrypt_vigenere('VIETNAM', 'KEY')}' l√† c√¢u tr·∫£ l·ªùi ƒë√∫ng!")
            st.balloons()
            
            # Show next level button
            if st.button(f"{translations['next_level']} ‚û°Ô∏è", key="level1_next"):
                level_up(2)
        else:
            st.error(f"{translations['incorrect']} H√£y th·ª≠ l·∫°i!")

def level_2_encryption_decryption():
    st.header("C·∫•p ƒë·ªô 2: M√£ h√≥a & Gi·∫£i m√£")
    
    st.markdown("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi C·∫•p ƒë·ªô 2! B√¢y gi·ªù b·∫°n s·∫Ω h·ªçc c√°ch m√£ h√≥a v√† gi·∫£i m√£ th√¥ng ƒëi·ªáp b·∫±ng m·∫≠t m√£ Vigen√®re.
    
    H√£y th·ª≠ m√£ h√≥a v√† gi·∫£i m√£ m·ªôt s·ªë th√¥ng ƒëi·ªáp ƒë·ªÉ hi·ªÉu r√µ h∆°n c√°ch th·ª©c ho·∫°t ƒë·ªông.
    """)
    
    tab1, tab2 = st.tabs(["üîí M√£ h√≥a", "üîì Gi·∫£i m√£"])
    
    with tab1:
        st.subheader("M√£ h√≥a th√¥ng ƒëi·ªáp")
        plaintext = st.text_area("Nh·∫≠p vƒÉn b·∫£n g·ªëc ƒë·ªÉ m√£ h√≥a:", "XINCHAO", key="encrypt_plaintext")
        key = st.text_input("Nh·∫≠p kh√≥a m√£ h√≥a:", "KEY", key="encrypt_key")
        
        if st.button("M√£ h√≥a", key="encrypt_button"):
            if not key or not plaintext:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† kh√≥a")
            else:
                # Process inputs
                plaintext = ''.join(c.upper() for c in plaintext if c.isalpha())
                key = ''.join(c.upper() for c in key if c.isalpha())
                
                if not key or not plaintext:
                    st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ªØ c√°i h·ª£p l·ªá cho vƒÉn b·∫£n g·ªëc v√† kh√≥a")
                else:
                    ciphertext = encrypt_vigenere(plaintext, key)
                    st.success(f"VƒÉn b·∫£n m√£ h√≥a: **{ciphertext}**")
                    
                    # Show the encryption process
                    st.markdown("### Qu√° tr√¨nh m√£ h√≥a:")
                    show_encryption_steps(plaintext, key, ciphertext)
    
    with tab2:
        st.subheader("Gi·∫£i m√£ th√¥ng ƒëi·ªáp")
        ciphertext = st.text_area("Nh·∫≠p m·∫≠t m√£ ƒë·ªÉ gi·∫£i m√£:", "BOJRZU", key="decrypt_ciphertext")
        key = st.text_input("Nh·∫≠p kh√≥a gi·∫£i m√£:", "KEY", key="decrypt_key")
        
        if st.button("Gi·∫£i m√£", key="decrypt_button"):
            if not key or not ciphertext:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ m·∫≠t m√£ v√† kh√≥a")
            else:
                # Process inputs
                ciphertext = ''.join(c.upper() for c in ciphertext if c.isalpha())
                key = ''.join(c.upper() for c in key if c.isalpha())
                
                if not key or not ciphertext:
                    st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ªØ c√°i h·ª£p l·ªá cho m·∫≠t m√£ v√† kh√≥a")
                else:
                    plaintext = decrypt_vigenere(ciphertext, key)
                    st.success(f"VƒÉn b·∫£n gi·∫£i m√£: **{plaintext}**")
                    
                    # Show the decryption process
                    st.markdown("### Qu√° tr√¨nh gi·∫£i m√£:")
                    show_decryption_steps(ciphertext, key, plaintext)
    
    # Challenge to move to the next level
    st.markdown("---")
    st.markdown("### üéÆ Th·ª≠ th√°ch Gi·∫£i m√£")
    
    st.markdown("""
    ƒê·ªÉ m·ªü kh√≥a C·∫•p ƒë·ªô 3, b·∫°n c·∫ßn gi·∫£i m√£ th√¥ng ƒëi·ªáp b√≠ m·∫≠t n√†y:
    
    M·∫≠t m√£: **FRBCFNOFMMYBKCVLISIXMEH**
    
    G·ª£i √Ω: Kh√≥a m√£ h√≥a l√† t√™n m·ªôt th√†nh ph·ªë l·ªõn ·ªü Vi·ªát Nam (vi·∫øt li·ªÅn kh√¥ng d·∫•u).
    """)
    
    # Input fields for the challenge
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("Nh·∫≠p kh√≥a b·∫°n nghƒ© l√† ƒë√∫ng:", key="level2_key")
    with col2:
        st.text_input("Nh·∫≠p th√¥ng ƒëi·ªáp ƒë√£ gi·∫£i m√£:", key="level2_answer")
    
    # Button to check the answer
    if st.button("Ki·ªÉm tra c√¢u tr·∫£ l·ªùi", key="check_level2"):
        update_level2_answer()
    
    # Display results after submission
    if st.session_state.level2_submitted:
        if st.session_state.level2_correct:
            st.success(f"{translations['correct']} B·∫°n ƒë√£ gi·∫£i m√£ th√†nh c√¥ng th√¥ng ƒëi·ªáp!")
            st.balloons()
            
            # Show next level button
            if st.button(f"{translations['next_level']} ‚û°Ô∏è", key="level2_next"):
                level_up(3)
        else:
            if st.session_state.level2_key.upper() == "HANOI":
                st.warning("Kh√≥a ƒë√∫ng! Nh∆∞ng th√¥ng ƒëi·ªáp gi·∫£i m√£ kh√¥ng ch√≠nh x√°c. H√£y th·ª≠ l·∫°i.")
            else:
                st.error(f"{translations['incorrect']} H√£y th·ª≠ l·∫°i v·ªõi m·ªôt kh√≥a kh√°c.")

def level_3_breaking_cipher():
    st.header("C·∫•p ƒë·ªô 3: Ph√° V·ª° M·∫≠t M√£")
    
    st.markdown("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi C·∫•p ƒë·ªô 3! B√¢y gi·ªù ch√∫ng ta s·∫Ω h·ªçc c√°ch ph√¢n t√≠ch v√† ph√° v·ª° m·∫≠t m√£ Vigen√®re.
    
    ### Ph√¢n t√≠ch t·∫ßn su·∫•t
    
    Ph√° v·ª° m·∫≠t m√£ Vigen√®re ph·ª©c t·∫°p h∆°n so v·ªõi m·∫≠t m√£ Caesar, nh∆∞ng v·∫´n c√≥ th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c b·∫±ng k·ªπ thu·∫≠t ph√¢n t√≠ch t·∫ßn su·∫•t:
    
    1. **X√°c ƒë·ªãnh ƒë·ªô d√†i kh√≥a** - s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p nh∆∞ ki·ªÉm tra Kasiski ho·∫∑c Ch·ªâ s·ªë tr√πng kh·ªõp (Index of Coincidence)
    2. **Chia m·∫≠t m√£** th√†nh c√°c nh√≥m d·ª±a tr√™n ƒë·ªô d√†i kh√≥a
    3. **√Åp d·ª•ng ph√¢n t√≠ch t·∫ßn su·∫•t** cho t·ª´ng nh√≥m ri√™ng l·∫ª (v√¨ m·ªói nh√≥m ƒë∆∞·ª£c m√£ h√≥a v·ªõi c√πng m·ªôt ƒë·ªô d·ªãch chuy·ªÉn)
    4. **K·∫øt h·ª£p c√°c k·∫øt qu·∫£** ƒë·ªÉ kh√¥i ph·ª•c kh√≥a
    """)
    
    st.subheader("So s√°nh m·∫≠t m√£ Caesar v√† Vigen√®re")
    
    st.markdown("""
    ### M·∫≠t m√£ Caesar
    
    M·∫≠t m√£ Caesar l√† m·ªôt m·∫≠t m√£ thay th·∫ø ƒë∆°n gi·∫£n trong ƒë√≥ m·ªói ch·ªØ c√°i trong vƒÉn b·∫£n g·ªëc ƒë∆∞·ª£c d·ªãch chuy·ªÉn m·ªôt s·ªë v·ªã tr√≠ c·ªë ƒë·ªãnh.
    
    **∆Øu ƒëi·ªÉm:**
    - D·ªÖ th·ª±c hi·ªán v√† s·ª≠ d·ª•ng
    - M√£ h√≥a v√† gi·∫£i m√£ nhanh ch√≥ng v·ªõi kh√≥a
    
    **Nh∆∞·ª£c ƒëi·ªÉm:**
    - Ch·ªâ c√≥ 25 kh√≥a c√≥ th·ªÉ (cho b·∫£ng ch·ªØ c√°i ti·∫øng Anh)
    - C√≥ th·ªÉ b·ªã ph√° v·ª° b·∫±ng c√°ch th·ª≠ t·∫•t c·∫£ c√°c kh√≥a m·ªôt c√°ch nhanh ch√≥ng
    - D·ªÖ b·ªã t·∫•n c√¥ng ph√¢n t√≠ch t·∫ßn su·∫•t (t·∫ßn su·∫•t ch·ªØ c√°i v·∫´n gi·ªØ nguy√™n)
    
    ### M·∫≠t m√£ Vigen√®re
    
    M·∫≠t m√£ Vigen√®re s·ª≠ d·ª•ng m·ªôt t·ª´ kh√≥a ƒë·ªÉ x√°c ƒë·ªãnh c√°c gi√° tr·ªã d·ªãch chuy·ªÉn kh√°c nhau cho c√°c v·ªã tr√≠ kh√°c nhau trong vƒÉn b·∫£n.
    
    **∆Øu ƒëi·ªÉm:**
    - Kh√¥ng gian kh√≥a l·ªõn h∆°n nhi·ªÅu (26^k kh·∫£ nƒÉng cho kh√≥a c√≥ ƒë·ªô d√†i k)
    - Kh·∫£ nƒÉng ch·ªëng l·∫°i ph√¢n t√≠ch t·∫ßn su·∫•t ƒë∆°n gi·∫£n
    - Nhi·ªÅu ch·ªØ c√°i trong vƒÉn b·∫£n g·ªëc c√≥ th·ªÉ ƒë∆∞·ª£c m√£ h√≥a th√†nh c√°c ch·ªØ c√°i m·∫≠t m√£ kh√°c nhau
    
    **Nh∆∞·ª£c ƒëi·ªÉm:**
    - V·∫´n d·ªÖ b·ªã t·∫•n c√¥ng b·ªüi c√°c k·ªπ thu·∫≠t ph√¢n t√≠ch m·∫≠t m√£ n√¢ng cao
    - S·ª± l·∫∑p l·∫°i c·ªßa kh√≥a t·∫°o ra c√°c m·∫´u c√≥ th·ªÉ b·ªã khai th√°c
    - Khi ƒë·ªô d√†i kh√≥a ƒë∆∞·ª£c x√°c ƒë·ªãnh, n√≥ gi·∫£m xu·ªëng th√†nh nhi·ªÅu m·∫≠t m√£ Caesar
    """)
    
    # Interactive demonstration
    st.subheader("Th·ª≠ ph√° v·ª° m·∫≠t m√£")
    
    st.markdown("""
    B√¢y gi·ªù h√£y th·ª≠ ph√° v·ª° m·ªôt m·∫≠t m√£ Vigen√®re khi bi·∫øt ƒë·ªô d√†i kh√≥a.
    
    ƒê√¢y l√† m·ªôt m·∫≠t m√£ ƒë√£ b·ªã ch·∫∑n t·ª´ m·ªôt ngu·ªìn b√≠ m·∫≠t:
    
    **LWSSUCMZXMGZTTZSUOAXZWBHGWOMHXQVTVPVGAGZHTVTVVSMKFMTVIKHRZTWWWPMLZLGMXEOAGZJGMSMHMVCSWTXQVTVPBKHRZXWIIMATRVMPLRPV**
    
    H√£y s·ª≠ d·ª•ng c√¥ng c·ª• ph√¢n t√≠ch ƒë·ªÉ t√¨m ƒë·ªô d√†i kh√≥a!
    """)
    
    # Example ciphertext
    example_cipher = "LWSSUCMZXMGZTTZSUOAXZWBHGWOMHXQVTVPVGAGZHTVTVVSMKFMTVIKHRZTWWWPMLZLGMXEOAGZJGMSMHMVCSWTXQVTVPBKHRZXWIIMATRVMPLRPV"
    
    # Show IoC for different key lengths for the example
    key_length_data = analyze_vigenere_key_length(example_cipher, max_length=15)
    
    fig, ax = plt.subplots(figsize=(10, 5))
    key_lengths = list(key_length_data.keys())
    index_values = list(key_length_data.values())
    
    ax.bar(key_lengths, index_values, color='skyblue')
    ax.set_xlabel('ƒê·ªô d√†i kh√≥a (Key Length)')
    ax.set_ylabel('Ch·ªâ s·ªë tr√πng kh·ªõp (Index of Coincidence)')
    ax.set_title('Ch·ªâ s·ªë tr√πng kh·ªõp cho c√°c ƒë·ªô d√†i kh√≥a kh√°c nhau')
    ax.set_xticks(key_lengths)
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    ax.axhline(y=0.067, color='r', linestyle='-', alpha=0.7, label='D·ª± ki·∫øn cho ti·∫øng Anh (Expected for English)')
    ax.legend()
    
    st.pyplot(fig)
    
    st.markdown("""
    Ch·ªâ s·ªë tr√πng kh·ªõp (Index of Coincidence - IoC) ƒëo x√°c su·∫•t hai ch·ªØ c√°i ƒë∆∞·ª£c ch·ªçn ng·∫´u nhi√™n trong m·ªôt vƒÉn b·∫£n l√† gi·ªëng nhau.
    
    - ƒê·ªëi v·ªõi vƒÉn b·∫£n ng·∫´u nhi√™n, IoC ‚âà 0.038
    - ƒê·ªëi v·ªõi vƒÉn b·∫£n ti·∫øng Anh, IoC ‚âà 0.067
    
    Khi ch√∫ng ta chia m·∫≠t m√£ th√†nh c√°c nh√≥m d·ª±a tr√™n ƒë·ªô d√†i kh√≥a ƒë√∫ng, m·ªói nh√≥m s·∫Ω c√≥ IoC g·∫ßn v·ªõi vƒÉn b·∫£n ti·∫øng Anh b√¨nh th∆∞·ªùng.
    
    **D·ª±a v√†o bi·ªÉu ƒë·ªì tr√™n, ƒë·ªô d√†i kh√≥a c√≥ th·ªÉ l√† bao nhi√™u?**
    """)
    
    user_key_length = st.number_input("Nh·∫≠p ƒë·ªô d√†i kh√≥a b·∫°n cho l√† ƒë√∫ng:", min_value=1, max_value=15, value=5)
    
    if st.button("Th·ª≠ ph√° m√£", key="break_cipher_btn"):
        if user_key_length == 5:
            decrypted_text, discovered_key = break_vigenere_cipher(example_cipher, user_key_length)
            st.success(f"ƒê·ªô d√†i kh√≥a ƒë√∫ng! Kh√≥a c√≥ th·ªÉ l√†: {discovered_key}")
            st.markdown(f"VƒÉn b·∫£n gi·∫£i m√£: **{decrypted_text}**")
            
            # Challenge to complete level 3
            st.markdown("### üéÆ Th·ª≠ th√°ch Ph√° m√£")
            st.markdown("""
            B√¢y gi·ªù h√£y tr·∫£ l·ªùi c√¢u h·ªèi n√†y d·ª±a tr√™n vƒÉn b·∫£n ƒë√£ gi·∫£i m√£:
            
            √ù nghƒ©a c·ªßa th√¥ng ƒëi·ªáp l√† g√¨? (Ch·ªçn m·ªôt trong c√°c l·ª±a ch·ªçn sau)
            """)
            
            message_meaning = st.radio(
                "√ù nghƒ©a c·ªßa th√¥ng ƒëi·ªáp:",
                ["M·ªôt b√†i th∆° v·ªÅ t√¨nh y√™u", "M·ªôt tr√≠ch ƒëo·∫°n t·ª´ s√°ch", "H∆∞·ªõng d·∫´n v·ªÅ b·∫£o m·∫≠t th√¥ng tin", "K·∫ø ho·∫°ch b√≠ m·∫≠t"],
                key="level3_message_type"
            )
            
            # Button to submit the answer
            if st.button("G·ª≠i c√¢u tr·∫£ l·ªùi", key="submit_level3"):
                update_level3_answer(message_meaning)
            
            # Display result after submission  
            if st.session_state.level3_submitted:
                if st.session_state.level3_correct:
                    st.success("Ch√≠nh x√°c! Th√¥ng ƒëi·ªáp l√† v·ªÅ b·∫£o m·∫≠t th√¥ng tin.")
                    st.balloons()
                    
                    # Show next level button
                    if st.button(f"{translations['next_level']} ‚û°Ô∏è", key="level3_next"):
                        level_up(4)
                else:
                    st.error("Kh√¥ng ch√≠nh x√°c. H√£y ƒë·ªçc k·ªπ th√¥ng ƒëi·ªáp v√† th·ª≠ l·∫°i!")
        else:
            st.error("ƒê·ªô d√†i kh√≥a kh√¥ng ch√≠nh x√°c. H√£y xem k·ªπ bi·ªÉu ƒë·ªì v√† th·ª≠ l·∫°i!")

def level_4_hacker_challenge():
    st.header("C·∫•p ƒë·ªô 4: Th·ª≠ th√°ch Hacker")
    
    st.markdown("""
    ## üéñÔ∏è Th·ª≠ th√°ch cu·ªëi c√πng
    
    Ch√∫c m·ª´ng v√¨ ƒë√£ ƒë·∫øn ƒë∆∞·ª£c th·ª≠ th√°ch cu·ªëi c√πng! B·∫°n ƒë√£ ch·ª©ng minh ƒë∆∞·ª£c k·ªπ nƒÉng m·∫≠t m√£ c·ªßa m√¨nh.
    
    Trong th·ª≠ th√°ch n√†y, b·∫°n s·∫Ω ph·∫£i ph√° v·ª° m·ªôt m·∫≠t m√£ Vigen√®re m√† kh√¥ng bi·∫øt kh√≥a. 
    B·∫°n s·∫Ω c·∫ßn s·ª≠ d·ª•ng t·∫•t c·∫£ ki·∫øn th·ª©c ƒë√£ h·ªçc v·ªÅ ph√¢n t√≠ch t·∫ßn su·∫•t v√† c√°c k·ªπ thu·∫≠t ph√° m√£.
    
    ƒê√¢y l√† th√¥ng ƒëi·ªáp b√≠ m·∫≠t cu·ªëi c√πng:
    
    **PZSVYMFCCKIQXSZWRLFWOZGIILSWVMBZPESJLVYYVHWPIKBCMBGPLYPCDZMFOWVSLRLLRYCAZCKIQXSZRDAFDRVHZBQHYYVHWPIUBCWVDRLQMLVDEBVVBDTZWRLVVBDSEXZIGOEHQTVLWIMYWMDIFGGEIGGZRFBBX**
    
    S·ª© m·ªánh c·ªßa b·∫°n:
    1. X√°c ƒë·ªãnh ƒë·ªô d√†i kh√≥a b·∫±ng ph√¢n t√≠ch ch·ªâ s·ªë tr√πng kh·ªõp (IoC)
    2. T√¨m kh√≥a
    3. Gi·∫£i m√£ th√¥ng ƒëi·ªáp
    
    B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• ph√¢n t√≠ch b√™n d∆∞·ªõi ƒë·ªÉ gi√∫p b·∫°n!
    """)
    
    # Final challenge ciphertext 
    final_cipher = "PZSVYMFCCKIQXSZWRLFWOZGIILSWVMBZPESJLVYYVHWPIKBCMBGPLYPCDZMFOWVSLRLLRYCAZCKIQXSZRDAFDRVHZBQHYYVHWPIUBCWVDRLQMLVDEBVVBDTZWRLVVBDSEXZIGOEHQTVLWIMYWMDIFGGEIGGZRFBBX"
    
    # Show IoC analysis for final challenge
    final_key_length_data = analyze_vigenere_key_length(final_cipher, max_length=15)
    
    fig, ax = plt.subplots(figsize=(10, 5))
    key_lengths = list(final_key_length_data.keys())
    index_values = list(final_key_length_data.values())
    
    ax.bar(key_lengths, index_values, color='skyblue')
    ax.set_xlabel('ƒê·ªô d√†i kh√≥a (Key Length)')
    ax.set_ylabel('Ch·ªâ s·ªë tr√πng kh·ªõp (IoC)')
    ax.set_title('Ch·ªâ s·ªë tr√πng kh·ªõp cho m·∫≠t m√£ cu·ªëi c√πng')
    ax.set_xticks(key_lengths)
    ax.grid(axis='y', linestyle='--', alpha=0.7)
    ax.axhline(y=0.067, color='r', linestyle='-', alpha=0.7, label='D·ª± ki·∫øn cho ti·∫øng Anh')
    ax.legend()
    
    st.pyplot(fig)
    
    # Let the user try to break the cipher
    st.subheader("C√¥ng c·ª• ph√° m√£")
    
    user_final_key_length = st.number_input("Nh·∫≠p ƒë·ªô d√†i kh√≥a b·∫°n mu·ªën th·ª≠:", min_value=1, max_value=15, value=6)
    
    if st.button("Ph√¢n t√≠ch v·ªõi ƒë·ªô d√†i kh√≥a n√†y", key="analyze_final_key"):
        decrypted_text, discovered_key = break_vigenere_cipher(final_cipher, user_final_key_length)
        st.markdown(f"**Kh√≥a c√≥ th·ªÉ:** {discovered_key}")
        st.markdown(f"**VƒÉn b·∫£n gi·∫£i m√£:**\n\n{decrypted_text}")
    
    # Final answer submission
    st.markdown("---")
    st.subheader("G·ª≠i c√¢u tr·∫£ l·ªùi cu·ªëi c√πng")
    
    final_key = st.text_input("Nh·∫≠p kh√≥a b·∫°n ƒë√£ ph√°t hi·ªán:", key="final_key")
    final_message = st.text_area("Nh·∫≠p √Ω nghƒ©a ch√≠nh c·ªßa th√¥ng ƒëi·ªáp (b·∫±ng ti·∫øng Vi·ªát):", key="final_message")
    
    if st.button("Ho√†n th√†nh Th·ª≠ th√°ch", key="complete_final"):
        if final_key.upper() == "CIPHER" and "th√¥ng tin" in final_message.lower() and "b·∫£o m·∫≠t" in final_message.lower():
            st.session_state.final_challenge_completed = True
    
    # Display completion message and badge
    if st.session_state.final_challenge_completed:
        st.success("üéñÔ∏è CH√öC M·ª™NG! B·∫°n ƒë√£ ho√†n th√†nh th·ª≠ th√°ch m·∫≠t m√£!")
        complete_challenge()
        
        # Display final badge
        badge_data = generate_badge("Chuy√™n Gia M·∫≠t M√£", "#1E88E5")
        st.markdown(f"""
        ## üèÜ B·∫°n ƒë√£ tr·ªü th√†nh Chuy√™n Gia M·∫≠t M√£!
        
        <img src="data:image/png;base64,{badge_data}" width="300">
        
        B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c:
        1. Nguy√™n l√Ω c∆° b·∫£n c·ªßa m·∫≠t m√£ Vigen√®re
        2. C√°ch m√£ h√≥a v√† gi·∫£i m√£ th√¥ng ƒëi·ªáp
        3. Ph√¢n t√≠ch t·∫ßn su·∫•t v√† k·ªπ thu·∫≠t ph√° v·ª° m·∫≠t m√£
        4. So s√°nh b·∫£o m·∫≠t gi·ªØa c√°c ph∆∞∆°ng ph√°p m√£ h√≥a kh√°c nhau
        
        H√£y ti·∫øp t·ª•c kh√°m ph√° th·∫ø gi·ªõi m·∫≠t m√£ h·ªçc!
        """, unsafe_allow_html=True)
        
        # Show snow animation
        st.snow()
        
        # Auto-show certificate after completion
        st.markdown("""
        <div style="text-align: center; margin-top: 30px;">
            <h2 style="color: #4CAF50;">üèÜ Ch·ª©ng nh·∫≠n ho√†n th√†nh üèÜ</h2>
            <div style="border: 3px solid #1E88E5; padding: 20px; margin: 20px auto; max-width: 600px; background-color: #f9f9f9;">
                <h3>Ch·ª©ng nh·∫≠n r·∫±ng</h3>
                <h2 style="color: #1E88E5; font-family: 'Arial', cursive;">H·ªçc sinh</h2>
                <p>ƒë√£ th√†nh c√¥ng ho√†n th√†nh</p>
                <h3 style="color: #4CAF50;">Kh√≥a h·ªçc M·∫≠t m√£ Vigen√®re</h3>
                <p style="font-style: italic;">Ng√†y: 27/04/2025</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Show error if incorrect
    elif final_key and final_message:
        st.error("C√¢u tr·∫£ l·ªùi ch∆∞a ch√≠nh x√°c. H√£y ph√¢n t√≠ch k·ªπ h∆°n v√† th·ª≠ l·∫°i!")

def main():
    st.title(translations["title"])
    
    # Display game progress
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"### {translations['level']}: {st.session_state.game_level}/4")
    with col2:
        st.markdown(f"### {translations['mission']}: {st.session_state.challenges_completed}/3")
    with col3:
        if st.session_state.mission_completed:
            st.markdown(f"### üèÜ {translations['mission_complete']}")
    
    # Show animations for achievements
    if st.session_state.show_animation:
        # Use Streamlit's native balloons
        st.balloons()
        st.session_state.show_animation = False
    
    # Display different content based on game level
    if st.session_state.game_level == 1:
        level_1_intro()
    elif st.session_state.game_level == 2:
        level_2_encryption_decryption()
    elif st.session_state.game_level == 3:
        level_3_breaking_cipher()
    elif st.session_state.game_level == 4:
        level_4_hacker_challenge()

if __name__ == "__main__":
    main()